{"ast":null,"code":"var _jsxFileName = \"/Users/osiimac2/Desktop/chatModule/chatModule/src/components/Channels/ChannelList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useFirebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Menu } from \"semantic-ui-react\";\nimport { setCurrentChannel } from \"../../store/actions/channel\";\nimport { useFirebase } from \"react-redux-firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChannelList = () => {\n  _s();\n\n  useFirebaseConnect([{\n    path: \"channels\"\n  }]);\n  const dispatch = useDispatch();\n  var channels = useSelector(state => state.firebase.ordered.channels);\n  var [result, setResult] = useState([]);\n  const currentChannel = useSelector(state => state.channels.currentChannel);\n  const [mounted, setMounted] = useState(false);\n  const [strings, setString] = useState(\"\");\n  useEffect(() => {\n    console.log(strings);\n\n    if (!mounted && !isEmpty(channels)) {\n      const arr = ['-MYiAXmjTGcl13Rpd5dH', '-MYhvDsY6iV-elUHSNmM'];\n      console.log(result);\n      arr.map((res, index) => {\n        result[index] = channels.filter(word => word.key == res);\n      });\n    }\n  });\n\n  const setActiveChannel = channel => {\n    dispatch(setCurrentChannel(channel));\n  };\n\n  if (!isLoaded(result.flat())) {\n    return \"Loading channels...\";\n  }\n\n  ;\n\n  if (isEmpty(result.flat())) {\n    return \"No channels...\";\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => setString(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Menu.Menu, {\n      children: result.flat() ? result.flat().map(({\n        key,\n        value\n      }) => /*#__PURE__*/_jsxDEV(Menu.Item, {\n        name: value === null || value === void 0 ? void 0 : value.name,\n        as: \"a\",\n        icon: \"hashtag\",\n        active: (currentChannel === null || currentChannel === void 0 ? void 0 : currentChannel.key) === key,\n        onClick: () => setActiveChannel({\n          key,\n          ...value\n        })\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this)) : \"Kişi listesiniz yok\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChannelList, \"z7DTL9aBhmeopUKCcMi6rcHkFh8=\", false, function () {\n  return [useFirebaseConnect, useDispatch, useSelector, useSelector];\n});\n\n_c = ChannelList;\nexport default ChannelList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChannelList\");","map":{"version":3,"sources":["/Users/osiimac2/Desktop/chatModule/chatModule/src/components/Channels/ChannelList.jsx"],"names":["React","useState","useEffect","useFirebaseConnect","isLoaded","isEmpty","useSelector","useDispatch","Menu","setCurrentChannel","useFirebase","ChannelList","path","dispatch","channels","state","firebase","ordered","result","setResult","currentChannel","mounted","setMounted","strings","setString","console","log","arr","map","res","index","filter","word","key","setActiveChannel","channel","flat","e","target","value","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useFirebaseConnect, isLoaded, isEmpty } from 'react-redux-firebase';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Menu } from \"semantic-ui-react\";\r\nimport { setCurrentChannel } from \"../../store/actions/channel\"\r\nimport { useFirebase } from \"react-redux-firebase\";\r\n\r\nconst ChannelList = () => {\r\n    useFirebaseConnect([{ path: \"channels\" }])\r\n    const dispatch = useDispatch();\r\n\r\n    var channels = useSelector((state) => state.firebase.ordered.channels);\r\n    var [result, setResult] = useState([])\r\n    const currentChannel = useSelector((state) => state.channels.currentChannel);\r\n    const [mounted, setMounted] = useState(false)\r\n    const [strings, setString] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        \r\n        console.log(strings )\r\n        if (!mounted && !isEmpty(channels)) {\r\n            const arr = ['-MYiAXmjTGcl13Rpd5dH', '-MYhvDsY6iV-elUHSNmM']\r\n\r\n            console.log(result);\r\n            arr.map((res, index) => {\r\n\r\n                result[index] = channels.filter(word => word.key == res)\r\n            })\r\n        }\r\n    })\r\n\r\n\r\n    const setActiveChannel = channel => {\r\n\r\n        dispatch(setCurrentChannel(channel));\r\n    };\r\n\r\n    if (!isLoaded(result.flat())) {\r\n        return \"Loading channels...\"\r\n    };\r\n\r\n    if (isEmpty(result.flat())) {\r\n        return \"No channels...\"\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"text\" onChange={e=>\r\n                setString(e.target.value)\r\n            } />\r\n        <Menu.Menu>\r\n            {result.flat() ? (\r\n                result.flat().map(({ key, value }) => (\r\n                    <Menu.Item\r\n                        key={key}\r\n                        name={value?.name}\r\n                        as=\"a\"\r\n                        icon=\"hashtag\"\r\n                        active={currentChannel?.key === key}\r\n                        onClick={() => setActiveChannel({ key, ...value })}\r\n                    />\r\n                ))\r\n            ) : (\r\n                \"Kişi listesiniz yok\"\r\n            )}\r\n        </Menu.Menu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChannelList;\r\n"]},"metadata":{},"sourceType":"module"}